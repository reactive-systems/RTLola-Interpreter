stages:
  - check
  - build
  - test
  - tests
  - bench
  - release

# Install additional packages, like a C compiler and cmake
#before_script:
#- apt-get update -yqq
#- apt-get install -yqq --no-install-recommends build-essential cmake

# Use cargo to check the source code formatting
cargo:check-format:
  stage: check
  tags:
    - docker
  image: rust:latest
  before_script:
    - sed -i s/'git@projects'/"gitlab-ci-token:${CI_JOB_TOKEN}@projects"/ Cargo.toml
    - rustup component add rustfmt-preview
  script:
    - rustc --version && cargo --version      # Print version info for debugging
    - cargo fmt --all --verbose -- --check

# Use cargo to run clippy (Rust linter)
cargo:clippy:
  stage: check
  tags:
    - docker
  image: rust:latest
  before_script:
    - sed -i s/'git@projects'/"gitlab-ci-token:${CI_JOB_TOKEN}@projects"/ Cargo.toml
    - rustup component add clippy-preview
  script:
    - rustc --version && cargo --version      # Print version info for debugging
    - cargo clippy

# Check that every ignored test has an accompanying comment
check-ignored-tests:
  stage: check
  tags:
    - docker
  image: alpine:latest
  before_script:
    - sed -i s/'git@projects'/"gitlab-ci-token:${CI_JOB_TOKEN}@projects"/ Cargo.toml
    - apk update && apk add --no-cache bash
  script:
    - ./check_ignored_tests_without_comment.sh
  allow_failure: true

# Use cargo to test the project on stable toolchain
cargo:test:
  stage: test
  tags:
    - docker
  image: rust:latest
  before_script:
    - sed -i s/'git@projects'/"gitlab-ci-token:${CI_JOB_TOKEN}@projects"/ Cargo.toml
    - apt-get update -yqq
    - apt-get install -yqq --no-install-recommends libpcap-dev
  script:
    - rustc --version && cargo --version      # Print version info for debugging
    - cargo test --all --verbose

# Use cargo to test the project on stable toolchain on windows
cargo:test:windows:
  stage: tests
  tags:
    - windows
    - rust
  before_script:
    - get-content Cargo.toml | %{$_ -replace "git@projects","gitlab-ci-token:${CI_JOB_TOKEN}@projects"} | set-content Cargo.toml
    - rustup update
    - rustc --version
    - cargo --version
  script:
    - cargo test --all --verbose
  allow_failure: true

# Use cargo to test the project on nightly toolchain
cargo:test-nightly:
  stage: test
  tags:
    - docker
  image: rustlang/rust:nightly
  variables:
    CARGO_INCREMENTAL: 0
    RUSTFLAGS: "-Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort"
    RUSTDOCFLAGS: "-Cpanic=abort"
  before_script:
    - sed -i s/'git@projects'/"gitlab-ci-token:${CI_JOB_TOKEN}@projects"/ Cargo.toml
    - apt-get update -yqq
    - apt-get install -yqq --no-install-recommends libpcap-dev python3-pip
    - pip3 install junit-xml
    - cargo install grcov
    - cargo install cargo2junit
  script:
    - rustc --version && cargo --version      # Print version info for debugging
    - cargo build
    - (cargo test -- -Z unstable-options --format json | cargo2junit > results.xml) || true # ignore the return code so that we can show the complete output (including ignored tests)
    - python3 ./tests/rtlola-interpreter-e2e-tests.py || true        # count the e2e test for coverage but keep going
    - grcov ./target/debug/ -s . -t html --llvm --branch --ignore-not-existing -o ./target/debug/coverage/
    - cat ./target/debug/coverage/index.html
    - cargo test --all --verbose
  allow_failure: true
  coverage: '/linesPercentage \w+">\d+\.\d+ /'
  artifacts:
    when: always
    paths:
      - target/debug/coverage/
    reports:
      junit: results.xml

# Run the tool by checking the number of triggers fired
integration_tests:
  stage: test
  tags:
    - docker
  image: rust:latest
  before_script:
    - sed -i s/'git@projects'/"gitlab-ci-token:${CI_JOB_TOKEN}@projects"/ Cargo.toml
    - apt-get update -yqq
    - apt-get install -yqq --no-install-recommends libpcap-dev python3-pip
    - pip3 install junit-xml
  variables:
    BUILD_MODE: "release"
  script:
    - python3 ./tests/rtlola-interpreter-e2e-tests.py
  artifacts:
    when: always
    reports:
      junit: e2e-results.xml

# Use cargo to run the benchmarks
cargo:bench:
  stage: bench
  tags:
    - benchmarking
  image: rustlang/rust:nightly
  before_script:
    - apt-get update -yqq
    - apt-get install -yqq --no-install-recommends libpcap-dev
    - sed -i s/'git@projects'/"gitlab-ci-token:${CI_JOB_TOKEN}@projects"/ Cargo.toml
  script:
    - rustc --version && cargo --version      # Print version info for debugging
    - cargo bench --quiet | grep -e 'bench:' | tee bench_results.txt # TODO: actually compare the results
    - sed s/'test '// bench_results.txt | sed -e s/' ... bench:'// | sed -e s/,//g | sed -e "s|ns/iter.*$||" > metrics.txt
  artifacts:
      name: "bench_results"
      paths:
        - bench_results.txt
      expire_in: 5 yrs
      reports:
        metrics: metrics.txt
  allow_failure: true

# For the release build we do not use the Cargo.lock file, because we haven't investigated how it interacts with different platforms.
# Windows, Linux, and MacOS could resolve to different Cargo.lock files.
# However, we keep the Cargo.lock files as artifacts.


release-windows:
  stage: release
  only:
    - tags
    - web
    - triggers
  tags:
    - windows
    - rust
  variables:
    RUSTFLAGS: "-C target-feature=+crt-static"
  before_script:
    - move-item -Path .\Cargo.toml -Destination .\Cargo.toml.bak
    - get-content Cargo.toml.bak | %{$_ -replace "git@projects","gitlab-ci-token:${CI_JOB_TOKEN}@projects"} | set-content Cargo.toml
    - rustup update
    - rustc --version 
    - cargo --version
  script:
    - rustup run stable-msvc cargo build --release --target x86_64-pc-windows-msvc --features public
  artifacts:
    name: "rtlola-interpreter-windows-${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}"
    paths:
      - target/x86_64-pc-windows-msvc/release/rtlola-interpreter.exe
      - Cargo.lock



#release-windows-gnu:
#  stage: release
#  only:
#    - tags
#    - web
#    - triggers
#  tags:
#    - windows
#    - rust
#  before_script:
#    - cd evaluator
#    - rustup update
#    - rustc --version && cargo --version      # Print version info for debugging
#  script:
#    - rustup run stable-gnu cargo build --release --target x86_64-pc-windows-gnu --features public
#  artifacts:
#    name: "rtlola-interpreter-windows-gnu-${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}"
#    paths:
#      - target/x86_64-pc-windows-gnu/release/rtlola-interpreter.exe
#      - Cargo.lock

release-linux:
  stage: release
  tags:
    - docker
  image: rust:latest
  only:
    - tags
    - web
    - triggers
  before_script:
    - apt-get update -yqq
    - apt-get install -yqq --no-install-recommends musl-dev musl-tools clang
    - cd evaluator
    - rustup target add x86_64-unknown-linux-musl
    - rustc --version && cargo --version      # Print version info for debugging
  script:
    - cargo build --release --target x86_64-unknown-linux-musl --features public
  artifacts:
    name: "rtlola-interpreter-linux-${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}"
    paths:
      - target/x86_64-unknown-linux-musl/release/rtlola-interpreter
      - Cargo.lock

#release-macos:
#  stage: release
#  only:
#    - tags
#    - web
#    - triggers
#  tags:
#    - macos
#  variables:
#    MACOSX_DEPLOYMENT_TARGET: "10.7"
#  before_script:
#    - cd evaluator
#    - rustup update
#    - rustc --version && cargo --version      # Print version info for debugging
#  script:
#    - rustup run stable-msvc cargo build --release --target x86_64-apple-darwin --features public
#  artifacts:
#    name: "rtlola-interpreter-macos-${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}"
#    paths:
#      - target/x86_64-apple-darwin/release/rtlola-interpreter
#      - Cargo.lock
