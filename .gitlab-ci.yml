stages:
  - check-format
  - clippy
  - ignored
  - test
  - additional-test
  - bench
#  - release

variables:
  CARGO_HOME: $CI_PROJECT_DIR/.cargo

# Install additional packages, like a C compiler and cmake
#before_script:
#- apt-get update -yqq
#- apt-get install -yqq --no-install-recommends build-essential cmake

default:
  before_script:
    - cd crates
    - sed -i s/'git=.*git@projects'/"git=\"https:\/\/gitlab-ci-token:${CI_JOB_TOKEN}@projects"/ rtlola-interpreter/Cargo.toml
    - sed -i s/'git=.*git@projects'/"git=\"https:\/\/gitlab-ci-token:${CI_JOB_TOKEN}@projects"/ rtlola-cli/Cargo.toml

# Use cargo to check the source code formatting
format:cli:
  stage: check-format
  tags:
    - docker
  image: rust:latest
  script:
    - rustc --version && cargo --version      # Print version info for debugging
    - cargo +nightly fmt -p rtlola-cli --verbose -- --check

# Use cargo to check the source code formatting
format:interpreter:
  stage: check-format
  tags:
    - docker
  image: rust:latest
  script:
    - rustc --version && cargo --version      # Print version info for debugging
    - cargo +nightly fmt -p rtlola-interpreter --verbose -- --check

# Use cargo to run clippy (Rust linter)
clippy:cli:
  stage: clippy
  tags:
    - docker
  image: rust:latest
  needs: ["format:cli"]
  cache:
    key: "cli"
    policy: pull-push
    paths:
      - target/
      - $CARGO_HOME
  script:
    - rustc --version && cargo --version      # Print version info for debugging
    - cargo clippy -p rtlola-cli

# Use cargo to run clippy (Rust linter)
clippy:interpreter:
  stage: clippy
  tags:
    - docker
  image: rust:latest
  needs: ["format:interpreter"]
  cache:
    key: "interpreter"
    policy: pull-push
    paths:
      - target/
      - $CARGO_HOME
  script:
    - rustc --version && cargo --version      # Print version info for debugging
    - cargo clippy -p rtlola-interpreter

# Check that every ignored test has an accompanying comment
ignored:interpreter:
  stage: ignored
  tags:
    - docker
  image: alpine:latest
  needs: ["clippy:interpreter"]
  script:
    - ./check_ignored_tests_without_comment.sh
  allow_failure: true

# Use cargo to test the project on stable toolchain
test:interpreter:
  stage: test
  tags:
    - docker
  image: rust:latest
  needs: ["ignored:interpreter"]
  cache:
    key: "interpreter"
    policy: pull-push
    paths:
      - target/
      - $CARGO_HOME
  script:
    - apt-get update -yqq
    - apt-get install -yqq --no-install-recommends libpcap-dev
    - rustc --version && cargo --version      # Print version info for debugging
    - cargo test -p rtlola-interpreter --all --verbose

# Run the tool by checking the number of triggers fired
test:cli:
  stage: test
  tags:
    - docker
  image: rust:latest
  needs: ["clippy:cli"]
  cache:
    key: "cli"
    policy: pull-push
    paths:
      - target/
      - $CARGO_HOME
  script:
    - apt-get update -yqq
    - apt-get install -yqq --no-install-recommends libpcap-dev python3-pip
    - pip3 install junit-xml
    - python3 ./rtlola-cli/rtlola-interpreter-e2e-tests.py
  artifacts:
    when: always
    reports:
      junit: e2e-results.xml

# Use cargo to test the project on stable toolchain on windows
test:windows:
  stage: additional-test
  tags:
    - windows
    - rust
  needs: ["test:cli", "test:interpreter"]
  variables:
    CARGO_HOME: "C:\\Users\\react\\.cargo"
  before_script:
    - (get-content Cargo.toml) | %{$_ -replace "git=.*git@projects","git=`"https://gitlab-ci-token:${CI_JOB_TOKEN}@projects"} | set-content Cargo.toml
    - rustup update
    - rustc --version
    - cargo --version
  script:
    - cargo test --all --verbose

# Use cargo to test the project on nightly toolchain
test:nightly:
  stage: additional-test
  tags:
    - docker
  image: rustlang/rust:nightly
  needs: ["test:cli", "test:interpreter"]
  cache:
    key: "build-nightly"
    policy: pull-push
    paths:
      - target/
      - $CARGO_HOME
  variables:
    RUSTFLAGS: "-Zinstrument-coverage -Zgcc-ld=lld"
    LLVM_PROFILE_FILE: "json5format-%m.profraw"
  script:
    - apt-get update -yqq
    - apt-get install -yqq --no-install-recommends libpcap-dev python3-pip
    - pip3 install junit-xml
    - cargo install cargo2junit
    - curl -L https://github.com/mozilla/grcov/releases/download/v0.6.1/grcov-linux-x86_64.tar.bz2 | tar jxf -
    - rustup component add llvm-tools-preview
    - (rm -r ./target/debug/coverage/) || true
    - rustc --version && cargo --version      # Print version info for debugging
    - (cargo test -- -Z unstable-options --format json | $CARGO_HOME/bin/cargo2junit > results.xml) || true # ignore the return code so that we can show the complete output (including ignored tests)
    - python3 ./rtlola-cli/rtlola-interpreter-e2e-tests.py || true        # count the e2e test for coverage but keep going
    - ./grcov . --ignore ".cargo/*" --binary-path ./target/debug/ -s . -t html --branch --ignore-not-existing --llvm -o ./target/debug/coverage/
    - cat ./target/debug/coverage/index.html
    - cargo test --all --verbose
  allow_failure: true
  coverage: '/linesPercentage \w+">\d+\.\d+ /'
  artifacts:
    when: always
    paths:
      - target/debug/coverage/
    reports:
      junit: results.xml

test:online_e2e:
  stage: additional-test
  only:
    - merge_requests
    - pipelines
    - tags
    - web
  tags:
    - docker
  image: rust:latest
  needs: ["test:cli", "test:interpreter"]
  cache:
    key: "cli"
    policy: pull-push
    paths:
      - target/
      - $CARGO_HOME
  script:
    - apt-get update -yqq
    - apt-get install -yqq --no-install-recommends libpcap-dev python3-pip
    - pip3 install junit-xml
    - python3 ./rtlola-cli/rtlola-interpreter-e2e-tests.py --online
  artifacts:
    when: always
    reports:
      junit: e2e-results.xml

test:wasm:
  stage: additional-test
  needs: ["test:cli", "test:interpreter"]
  tags:
    - docker
  image: rust:latest
  cache:
    key: "wasm"
    policy: pull-push
    paths:
      - target/
      - $CARGO_HOME
  script:
    - rustup target add wasm32-unknown-unknown
    - rustc --version
    - cargo --version
    - cargo check -p rtlola-interpreter --target wasm32-unknown-unknown --no-default-features

# Use cargo to run the benchmarks
cargo:bench:
  stage: bench
  only:
    - merge_requests
    - pipelines
    - tags
    - web
  tags:
    - docker
  image: rustlang/rust:nightly
  needs: ["test:windows", "test:nightly", "test:online_e2e"]
  cache:
    key: "build-nightly"
    policy: pull-push
    paths:
      - target/
      - $CARGO_HOME
  script:
    - apt-get update -yqq
    - apt-get install -yqq --no-install-recommends libpcap-dev
    - rustc --version && cargo --version      # Print version info for debugging
    - cargo bench --quiet | grep -e 'bench:' | tee bench_results.txt # TODO: actually compare the results
    - sed s/'test '// bench_results.txt | sed -e s/' ... bench:'// | sed -e s/,//g | sed -e "s|ns/iter.*$||" > metrics.txt
  artifacts:
    name: "bench_results"
    paths:
      - bench_results.txt
    expire_in: 5 yrs
    reports:
      metrics: metrics.txt
  allow_failure: true

# For the release build we do not use the Cargo.lock file, because we haven't investigated how it interacts with different platforms.
# Windows, Linux, and MacOS could resolve to different Cargo.lock files.
# However, we keep the Cargo.lock files as artifacts.


#release-windows:
#  stage: release
#  only:
#    - tags
#    - web
#    - triggers
#  tags:
#    - windows
#    - rust
#  variables:
#    RUSTFLAGS: "-C target-feature=+crt-static"
#  before_script:
#    - (get-content Cargo.toml) | %{$_ -replace "git@projects","gitlab-ci-token:${CI_JOB_TOKEN}@projects"} | set-content Cargo.toml
#    - rustup update
#    - rustc --version
#    - cargo --version
#  script:
#    - rustup run stable-msvc cargo build --release --target x86_64-pc-windows-msvc --features public
#  artifacts:
#    name: "rtlola-interpreter-windows-${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}"
#    paths:
#      - target/x86_64-pc-windows-msvc/release/rtlola-interpreter.exe
#      - Cargo.lock



#release-windows-gnu:
#  stage: release
#  only:
#    - tags
#    - web
#    - triggers
#  tags:
#    - windows
#    - rust
#  before_script:
#    - cd evaluator
#    - rustup update
#    - rustc --version && cargo --version      # Print version info for debugging
#  script:
#    - rustup run stable-gnu cargo build --release --target x86_64-pc-windows-gnu --features public
#  artifacts:
#    name: "rtlola-interpreter-windows-gnu-${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}"
#    paths:
#      - target/x86_64-pc-windows-gnu/release/rtlola-interpreter.exe
#      - Cargo.lock

#release-linux:
#  stage: release
#  tags:
#    - docker
#  image: rust:latest
#  only:
#    - tags
#    - web
#    - triggers
#  before_script:
#    - apt-get update -yqq
#    - apt-get install -yqq --no-install-recommends musl-dev musl-tools clang
#    - cd evaluator
#    - rustup target add x86_64-unknown-linux-musl
#    - rustc --version && cargo --version      # Print version info for debugging
#  script:
#    - cargo build --release --target x86_64-unknown-linux-musl --features public
#  artifacts:
#    name: "rtlola-interpreter-linux-${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}"
#    paths:
#      - target/x86_64-unknown-linux-musl/release/rtlola-interpreter
#      - Cargo.lock

#release-macos:
#  stage: release
#  only:
#    - tags
#    - web
#    - triggers
#  tags:
#    - macos
#  variables:
#    MACOSX_DEPLOYMENT_TARGET: "10.7"
#  before_script:
#    - cd evaluator
#    - rustup update
#    - rustc --version && cargo --version      # Print version info for debugging
#  script:
#    - rustup run stable-msvc cargo build --release --target x86_64-apple-darwin --features public
#  artifacts:
#    name: "rtlola-interpreter-macos-${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}"
#    paths:
#      - target/x86_64-apple-darwin/release/rtlola-interpreter
#      - Cargo.lock
